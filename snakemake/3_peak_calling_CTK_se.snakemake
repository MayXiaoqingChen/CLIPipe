include: './0_common.snakemake'

output_dir = config.get("output_dir")
summary_dir = config.get('summary_dir')
root_dir = config.get('root_dir')

def get_all_inputs(wildcards):
    available_inputs = dict(
        cims_uniq_robust_bed_file=expand('{output_dir}/peak_calling_CTK/{sample_id}.CIMS.robust.bed',output_dir=output_dir, sample_id=sample_ids)
    )
    enabled_inputs = list(available_inputs.keys())
    inputs = []
    for key, l in available_inputs.items():
        if key in enabled_inputs:
            inputs += l
    return inputs

rule all:
    input:
        get_all_inputs

###------------------------The output section---------------------------###

rule convert_novoalign_file_to_tag_bed:
    input:
        novoalign_mapping_file='{output_dir}/mapping_novoalign/{sample_id}.novoalign'
    output:
        ctk_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.bed',
        ctk_mutation_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.mutation.bed'
    threads: 
        config.get('threads_compress')
    log:
        '{output_dir}/log/peak_calling_CTK/convert_novoalign_file_to_tag_bed/{sample_id}.log'
    shell:
        # Output mutation file
        # Input novoalign alignment file
        # Output bed file
        '''perl {root_dir}/bin/ctk/novoalign2bed.pl \
            --mismatch-file {output.ctk_mutation_bed_file} \
            {input.novoalign_mapping_file} \
            {output.ctk_bed_file}
        '''

rule collapse_duplicate:
    input:
        ctk_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.bed'
    output:
        ctk_uniq_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.bed'
    threads: 
        config.get('threads_compress')
    log:
        '{output_dir}/log/peak_calling_CTK/{sample_id}.log'
    shell:
        '''perl {root_dir}/bin/ctk/tag2collapse.pl \
            -weight \
            --weight-in-name \
            --keep-max-score \
            --keep-tag-name \
            {input.ctk_bed_file} \
            {output.ctk_uniq_bed_file}
        '''

rule join_mutation_with_tag_bed:
    input:
        ctk_mutation_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.mutation.bed',
        ctk_uniq_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.bed'
    output:
        ctk_mutation_uniq_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.mutation.bed'
    threads:
        config.get('threads_compress')
    log:
        '{output_dir}/log/peak_calling_CTK/{sample_id}.log'
    shell:
        '''python2 {root_dir}/bin/ctk/joinWrapper.py \
            {input.ctk_mutation_bed_file} \
            {input.ctk_uniq_bed_file} \
            4 \
            4 \
            N \
            {output.ctk_mutation_uniq_bed_file}
        '''

rule split_bed_file_according_to_three_mutation_type:
    input:
        ctk_mutation_uniq_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.mutation.bed'
    output:
        ctk_del_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.del.bed',
        ctk_sub_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.sub.bed',
        ctk_ins_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.ins.bed'
    threads: 
        config.get('threads_compress')
    log:
        '{output_dir}/log/peak_calling_CTK/{sample_id}.log'
    shell:
        # deletion
        # substitution
        # insertion
        '''awk '{{if($9=="-") print $0}}' {input.ctk_mutation_uniq_bed_file} | cut -f 1-6 > {output.ctk_del_bed_file}; \
            awk '{{if($9==">") print $0}}' {input.ctk_mutation_uniq_bed_file} | cut -f 1-6 > {output.ctk_sub_bed_file}; \
            awk '{{if($9=="+") print $0}}' {input.ctk_mutation_uniq_bed_file} | cut -f 1-6 > {output.ctk_ins_bed_file}
        '''

rule CIMS_calculation_deletion_type:
    input:
        ctk_uniq_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.bed',
        ctk_del_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.del.bed'
    output:
        tmp_dir='{output_dir}/peak_calling_CTK/{sample_id}_cache_del/',
        cims_uniq_del_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.del.CIMS.txt',
        cims_uniq_del_robust_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.del.CIMS.robust.txt'
    threads: 
        config.get('threads_compress')
    log:
        '{output_dir}/log/peak_calling_CTK/{sample_id}.log'
    shell:
        # verbose mode
        # number of iterations for permutation
        # track mutation position relative to read start
        '''perl {root_dir}/bin/ctk/CIMS.pl \
            -v \
            -n 5 \
            -p \
            -c {output.tmp_dir} \
            --keep-cache \
            {input.ctk_uniq_bed_file} \
            {input.ctk_del_bed_file} \
            {output.cims_uniq_del_file} ; \
            awk '{{if($9<=0.001) print $0}}' {output.cims_uniq_del_file} | sort -k 9,9n -k 8,8nr -k 7,7n > {output.cims_uniq_del_robust_file}
        '''

rule CIMS_calculation_substitution_type:
    input:
        ctk_uniq_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.bed',
        ctk_sub_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.sub.bed'
    output:
        tmp_dir='{output_dir}/peak_calling_CTK/{sample_id}_cache_sub/',
        cims_uniq_sub_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.sub.CIMS.txt',
        cims_uniq_sub_robust_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.sub.CIMS.robust.txt'
    threads: 
        config.get('threads_compress')
    log:
        '{output_dir}/log/peak_calling_CTK/{sample_id}.log'
    shell:
        # verbose mode
        # number of iterations for permutation
        # track mutation position relative to read start
        '''perl {root_dir}/bin/ctk/CIMS.pl \
            -v \
            -n 5 \
            -p \
            -c {output.tmp_dir} \
            --keep-cache \
            {input.ctk_uniq_bed_file} \
            {input.ctk_sub_bed_file} \
            {output.cims_uniq_sub_file} ; \
            awk '{{if($9<=0.001) print $0}}' {output.cims_uniq_sub_file} | sort -k 9,9n -k 8,8nr -k 7,7n > {output.cims_uniq_sub_robust_file}
        '''

rule CIMS_calculation_insertion_type:
    input:
        ctk_uniq_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.bed',
        ctk_ins_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.ins.bed',
    output:
        tmp_dir='{output_dir}/peak_calling_CTK/{sample_id}_cache_ins/',
        cims_uniq_ins_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.ins.CIMS.txt',
        cims_uniq_ins_robust_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.ins.CIMS.robust.txt'
    threads: 
        config.get('threads_compress')
    log:
        '{output_dir}/log/peak_calling_CTK/{sample_id}.log'
    shell:
        # verbose mode
        # number of iterations for permutation
        # track mutation position relative to read start
        '''perl {root_dir}/bin/ctk/CIMS.pl \
            -v \
            -n 5 \
            -p \
            -c {output.tmp_dir} \
            --keep-cache \
            {input.ctk_uniq_bed_file} \
            {input.ctk_ins_bed_file} \
            {output.cims_uniq_ins_file} ; \
            awk '{{if($9<=0.001) print $0}}' {output.cims_uniq_ins_file} | sort -k 9,9n -k 8,8nr -k 7,7n > {output.cims_uniq_ins_robust_file}
        '''

rule merge_CIMS_peaks_from_three_types_of_mutation:
    input:
        cims_uniq_del_robust_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.del.CIMS.robust.txt',
        cims_uniq_sub_robust_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.sub.CIMS.robust.txt',
        cims_uniq_ins_robust_file='{output_dir}/peak_calling_CTK/{sample_id}.tag.uniq.ins.CIMS.robust.txt'
    output:
        cims_uniq_robust_bed_file='{output_dir}/peak_calling_CTK/{sample_id}.CIMS.robust.bed'
    threads: 
        config.get('threads_compress')
    log:
        '{output_dir}/log/peak_calling_CTK/{sample_id}.log'
    shell:
        '''cat \
            {input.cims_uniq_del_robust_file} \
            {input.cims_uniq_sub_robust_file} \
            {input.cims_uniq_ins_robust_file} > \
            {output.cims_uniq_robust_bed_file}
        '''