include: './0_common.snakemake'

output_dir = config.get("output_dir")
summary_dir = config.get('summary_dir')

def get_all_inputs(wildcards):
    available_inputs = dict(
        bam_index_file=expand('{output_dir}/mapping_bowtie/{sample_id}.bam.bai',output_dir=output_dir, sample_id=sample_ids),
        bed_file=expand('{output_dir}/mapping_bowtie/{sample_id}.bed',output_dir=output_dir, sample_id=sample_ids),
    )
    enabled_inputs = list(available_inputs.keys())
    inputs = []
    for key, l in available_inputs.items():
        if key in enabled_inputs:
            inputs += l
    return inputs

rule all:
    input:
        get_all_inputs

###------------------------The output section---------------------------###

rule mapping_bowtie:
    input:
        fasta='{output_dir}/pre_process/{sample_id}.clipped.filtered.collapsed.trimmed.fa'
    output:
        sam='{output_dir}/mapping_bowtie/{sample_id}.sam'
    params:
        bowtie1_index=config.get('reference_dir') + config.get('species') + '/bowtie_index/' + config.get('species')
    threads: 
        config.get('threads_mapping')
    log:
        '{output_dir}/log/mapping_bowtie/mapping_bowtie/{sample_id}.log'
    shell:
        '''bowtie \
            -f \
            -v 2 \
            -m 1 \
            --best \
            --strata \
            --sam \
            -x {params.bowtie1_index} \
            -p {threads} \
            {input.fasta} \
            {output.sam}
        '''

rule sam2bam:
    input:
        sam_file='{output_dir}/mapping_bowtie/{sample_id}.sam'
    output:
        bam_file='{output_dir}/mapping_bowtie/{sample_id}.bam'
    threads:
        config.get('threads_compress')
    log:
        '{output_dir}/log/mapping_bowtie/sam2bam/{sample_id}.log'
    shell:
        '''samtools sort -@ {threads} {input.sam_file} > {output.bam_file}
        '''

rule bam_index:
    input:
        bam_file='{output_dir}/mapping_bowtie/{sample_id}.bam'
    output:
        bam_index_file='{output_dir}/mapping_bowtie/{sample_id}.bam.bai'
    threads:
        config.get('threads_mapping')
    log:
        '{output_dir}/log/mapping_bowtie/bam_index/{sample_id}.log'
    shell:
        '''samtools index -@ {threads} {input.bam_file}
        '''

rule bam2bed:
    input:
        bam_file='{output_dir}/mapping_bowtie/{sample_id}.bam'
    output:
        bed_file='{output_dir}/mapping_bowtie/{sample_id}.bed'
    threads:
        config.get('threads_compress')
    log:
        '{output_dir}/log/mapping_bowtie/bam2bed/{sample_id}.log'
    shell:
        '''bedtools bamtobed -i {input.bam_file} > {output.bed_file}
        '''
